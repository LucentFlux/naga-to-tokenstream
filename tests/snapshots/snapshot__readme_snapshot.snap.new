---
source: tests/snapshot.rs
assertion_line: 39
expression: "prettyplease::unparse(&syn::parse2(tokens).unwrap())"
---
#[allow(unused)]
///Information about the globals within the module, exposed as constants and functions.
/**```rust
///Information about the `bar` global variable within this shader module.
pub mod bar {
    #[allow(unused)]
    use super::*;
    pub const NAME: &'static str = "bar";
    #[allow(unused)]
    pub const SPACE: naga::AddressSpace = naga::AddressSpace::Storage {
        access: naga::StorageAccess::from_bits_retain(1u32),
    };
    pub type Ty = Bar;
    pub mod binding {
        pub const GROUP: u32 = 0u32;
        pub const BINDING: u32 = 0u32;
    }
}

```*/
pub mod globals {
    #[allow(unused)]
    use super::*;
    ///Information about the `bar` global variable within this shader module.
    pub mod bar {
        #[allow(unused)]
        use super::*;
        pub const NAME: &'static str = "bar";
        #[allow(unused)]
        pub const SPACE: naga::AddressSpace = naga::AddressSpace::Storage {
            access: naga::StorageAccess::from_bits_retain(1u32),
        };
        pub type Ty = Bar;
        pub mod binding {
            pub const GROUP: u32 = 0u32;
            pub const BINDING: u32 = 0u32;
        }
    }
}
#[allow(unused)]
///Information about the constants within the module, exposed as constants and functions.
/**```rust
///Information about the `ELEMENTS_LENGTH` constant variable within this shader module.
pub mod ELEMENTS_LENGTH {
    #[allow(unused)]
    use super::*;
    pub const NAME: &'static str = "ELEMENTS_LENGTH";
    pub const VALUE: u32 = 128u32;
}

```*/
pub mod constants {
    #[allow(unused)]
    use super::*;
    ///Information about the `ELEMENTS_LENGTH` constant variable within this shader module.
    pub mod ELEMENTS_LENGTH {
        #[allow(unused)]
        use super::*;
        pub const NAME: &'static str = "ELEMENTS_LENGTH";
        pub const VALUE: u32 = 128u32;
    }
}
#[allow(unused)]
///Information about the entry points within the module, exposed as constants and functions.
/**```rust
pub mod main {
    pub const NAME: &'static str = "main";
    pub const STAGE: naga::ShaderStage = naga::ShaderStage::Compute;
    pub const WORKGROUP_SIZE: [u32; 3] = [256u32, 1u32, 1u32];
}

```*/
pub mod entry_points {
    #[allow(unused)]
    use super::*;
    pub mod main {
        pub const NAME: &'static str = "main";
        pub const STAGE: naga::ShaderStage = naga::ShaderStage::Compute;
        pub const WORKGROUP_SIZE: [u32; 3] = [256u32, 1u32, 1u32];
    }
}
#[allow(unused)]
///Equivalent Rust definitions of the types defined in this module.
/**```rust
#[allow(unused, non_camel_case_types)]
#[derive(Debug, PartialEq, Clone, encase::ShaderType)]
pub struct Foo {
    pub a: i32,
    pub b: glam::u32::UVec4,
    pub c: glam::u32::UVec4,
}
#[allow(unused, non_camel_case_types)]
#[derive(Debug, PartialEq, Clone, encase::ShaderType)]
pub struct Bar {
    pub size: u32,
    pub elements: [glam::bool::BVec2; 128u32 as usize],
    #[size(runtime)]
    pub foos: Vec<Foo>,
}

```*/
pub mod types {
    #[allow(unused, non_camel_case_types)]
    #[derive(Debug, PartialEq, Clone, encase::ShaderType)]
    pub struct Foo {
        pub a: i32,
        pub b: glam::u32::UVec4,
        pub c: glam::u32::UVec4,
    }
    #[allow(unused, non_camel_case_types)]
    #[derive(Debug, PartialEq, Clone, encase::ShaderType)]
    pub struct Bar {
        pub size: u32,
        pub elements: [glam::bool::BVec2; 128u32 as usize],
        #[size(runtime)]
        pub foos: Vec<Foo>,
    }
}
#[allow(unused)]
use types::*;
